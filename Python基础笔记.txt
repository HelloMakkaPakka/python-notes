规律
    python遵循数学运算规律
    python命名变量的方式称为 snake case，因为用下划线连接单词
    python可通过变量名称访问变量值
    python可同时对多个变量赋值
    python中序列有字符串、列表、元组
    仅一个元素 x 的列表写成 [x], 但仅一个元素的元组要在括号内多写个逗号：(x,)。这是因为 Python 中，圆括号承担的语法功能太多了
    首先得先能写出符合要求的代码，之后再考虑如何写得更好
    各自的对象调用各自的方法
    若执行文件和被执行文件在同一目录则可直接使用接入文件名，若处在不同的目录则需将被执行文件的目录写全，如 'D:/A/example.csv'
    #重名的话一般指向最后一个定义

模块
    import语句导入模块
    import...as... ：导入模块并为模块取名
    import a, b, c ：导入a.py、b.py、c.py
    dir(#模块) ：查看模块所有属性和方法、特殊方法
    from #包名 import * ：导入目标包的所有内容
    导入模块后，要使用模块中的变量、函数，需要通过 模块名.变量名 和 模块名.函数名() 的方式。. 表明了从属关系，表示某个模块里面的某个变量或函数
    from #模块 import #变量或函数 ：导入部分模块，之后可以直接使用变量或函数
    if __name__ == "__main__": ：__name__ 是 Python 里一个特殊的内置变量，它的值默认是模块名，如果该模块是作为一个独立的程序加载（要么通过从一个终端提示符来运行它，要么从一个IDLE窗口加载它），该模块的__name__变量会被设置为字符串"__main__"。否则，这个变量会被设置为模块的名称。

内置模块
    time 模块：
        .sleep() ： 参数为秒，用于暂停程序的执行
        .time() ： 获取当前时间的Unix时间戳（格林威治时间 1970 年 01 月 01 日 00 时 00 分 00 秒起至现在的总秒数）
        .ctime(#Unix时间戳) ：把时间戳转化为人类友好形式，若无参数输入，则默认以time.time()为参数，返回人类友好时间（Mon Sep 28 10:24:00 2020）

    datetime 模块：
        datetime 模块：
            .now() ： 返回人类友好时间（2020-10-24 10:24:00.000001）
            .fromtimestamp(#Unix时间戳) ：将 Unix时间戳 转换为 人类友好时间（2020-10-24 10:24:00）
            .timedelta(hours=# ,days =#) #参数有：weeks, days, hours, minutes, seconds, milliseconds, microsecondes

    random 模块：
        .random() ： 随机生成0~1之间的浮点数[0,1)
        .randint(#最小值, #最大值) ： 随机生成最小值到最大值之间的整数，包括最值
        .randrange(#最小值, #最大值, #步长) ：按照步长随机生成最小值到最大值之间的整数，不包括最大值
        .uniform(#最小值, #最大值) ： 随机生成最小值到最大值之间的浮点数，包括最值
        .choice(#序列) ： 从*非空序列*中随机返回一个元素

    math 模块：
        .ceil(#值) ： 向上取整
        .floor(#值) ： 向下取整
        .sqrt(#值) ： 取平方根
        .pi ： 返回常数π
        .e ： 返回常数e

    os 模块：
        ._exit(0) ：直接退出程序，参数为0时无报错，为1时有报错
        .startfile('#Path') ：打开目标文件
        .popen('#command') ：执行目标命令，结果需要用os.popen().read()才能打印
        .system('#command') ：执行目标命令，结果直接打印出来，使用 && 连接多条命令

    subprocess 模块：
        .Popen(#命令, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE) ：执行目标命令，适应于无控制台打包时替换os.popen()
        #Popen返回值.stdout.read() ：读取Popen的返回值

类
    python中“类”是无数个相似个体的集合，其中每个个体叫做“实例”
    类的特征和行为分别称为“属性(attribute)”和“方法(method)”
    类的创建：
        class #类名（首字母大写）:
            #类的属性创建:通过赋值语句
            #类方法的属性创建:def #方法名(self（必须放在首位的参数self）):
                #方法的具体执行过程
    类的调用：
        类的实例化：#实例名 = #类名() （创建了一个“可调用所属类的所有属性和方法”的实例）
        通过 #实例名.#属性名 和 #实例名.方法名() 调用目标类的所有属性和方法
    self 的作用：
        创建类的方法时，必须要将第一个参数留给 self，并在调用时忽略它
        在调用实例的方法时，Python 会把实例本身作为第一个参数传入
        在类的方法中调用类的属性和方法时，要通过 self.#属性名 或 self.#方法名() 的格式调用
    神奇方法：
        def __init__(self, #A, #B): 每当进行类的实例化时，初始化方法会自动被执行,实例化为 #实例名 = #类名(#A, #B)
        def __str__(self): 直接打印实例的结果为该方法的返回值
    面向过程与面向对象：
        面向过程以动作（函数）为主体，对象作为参数传递给函数，搭配简单的线性思维
        面向对象以对象为主体，动作和特征分别是对象的方法和属性，搭配复杂的思维
        例子：
            面向过程，大概就是：
            32门火炮轰击地方阵地5分钟
            16名士兵配合2辆坦克向前冲锋
            1架直升机提供空中支援
        面向对象就是：
            第二连占领地方阵地。
            怎么占领？第二连自己去实现！
    类的继承：
        class #子类名(#父类名1, #父类名2):
            pass
        子类继承父类的属性和方法
        多层继承：当父类还有自己的父类时，子类也能继承父类的父类的属性和方法
        多重继承：用实例的属性和方法时会优先在子类中查找，找不到再从最左侧的父类依次往右查找，直到找到为止，如果都没有找到则会报错
    类的定制：
        新增：在继承父类的属性和方法的基础上添加自己独有的属性和方法
        重写：在继承父类的属性和方法的基础上重写父类的属性和方法

函数
    print(end='\n') 输出，参数 end 默认为换行符
    input() 输入
    type() 返回目标变量的类型
    len() 得到列表的长度
    sum() 将列表中的元素相加
    list(#元组) 将元组转化为列表
    tuple(#列表) 将列表转化为元组
    zip(#列表, #列表) 合并多个列表，将多个列表中一一对应的元素合并到一个元组中，从而生成一个新的 zip 类型，如果多个列表长度不一样，遍历次数以长度短的列表长度为准
    enumerate(#列表, #起始数字) 给列表中每个元素加上序号，合并到一个元组中，从而生成一个新的 enumerate 类型
    range(start, stop, step)
    randint(#最小值, #最大值) 随机生成最小值到最大值之间的数（包括最小值和最大值）
    eval('#字符串') 去掉左右两边引号，得到真正的数据类型
    round(#浮点数, #精确到小数点后位数) 返回浮点数四舍六入五成双后的目标位数值
    zfill(#目标字符串长度) 返回指定长度的字符串，原字符串右对齐，前面填充0

默认参数：
    def #函数名(a, b, c=1) ：参数 c 即为 默认参数，当 参数c 没有输入值时，默认值为其参数值，否则为 参数c 重新赋值。默认参数必须位于非默认参数之后

方法
    列表方法：
        #连接符.join(#序列) 方法用于把序列中的所有元素拼接成一个字符串

    字符串方法：
        .upper() 小写字母转大写字母
        .lower() 大写字母转小写字母
        .capitalize() 首字母大写，其余小写（若第一个字符不是字母则无大写）
        .title() 单词首字母大写，其余小写（若第一个字符不是字母，跳过它）
        .swapcase() 大小写相互转换
        .split(#分隔符, #最大分割次数) （分隔符默认所有的空字符，最大分割次数，默认为-1，不限次数）(返回列表）
        #连接符.join(#序列) 将序列中的元素连接生成一个新的字符串
        #字符串.strip(#字符或字符序列) 将传入字符串中每个字符从首尾依次移除
        .count(#子字符串, #起始索引, #结束索引) 统计字符串中某个字符串出现的次数
        .find(#子字符串, #起始索引, #结束索引) 检测字符串中是否包含子字符串，如果包含子字符串返回第一次出现的索引值，否则返回 -1
        .index(#子字符串, #起始索引, #结束索引) 检测字符串中是否包含子字符串，如果包含子字符串返回第一次出现的索引值，否则报错
        .replace(#被替换字符串, #替换字符串, #替换的最多次数) 将字符串中的指定字符串替换成别的字符串 （替换次数默认无限次）

神奇方法（魔术方法）（def __#方法名#__()）

进制转换
    bin(int(#进制数字符串, #目标进制)) ：转2进制数字符串，以0b开头，支持8、10、16进制
    oct(int(#进制数字符串, #目标进制)) ：转8进制数字符串，以0o开头，支持2、10、16进制
    int(#进制数字符串, #目标进制) ：转10进制数字符串，支持2、8、16进制
    hex(int(#进制数字符串, #目标进制)) ：转16进制数字符串，以0x开头，支持2、8、10进制

运算符
    算数运算符
        +，加
        -，减
        *，乘
        /，除 运算结果都是浮点数
        %，取模（取余）
        **，幂
        //，除（向下取整）
    #    ^，插入符号（按位XOR）
    
    逻辑运算符
        == ：判断两个变量的值是否完全相同
        != ：判断两个变量的值是否不相同
        <= ：判断左边变量的值是否小于右边变量的值
        >= ：判断左边变量的值是否大于右边变量的值
        and ：
        or ：
        not ：
        is ：判断两个变量的地址和值是否完全相同
        in ：判断左边变量是否属于右边变量
    
    赋值运算符
        =，E: x = a, x = a
        +=, E: x += a, x = x + a
        -=, E: x -= a, x = x - a
        *=, E: x *= a, x = x * a
        /=, E: x /= a, x = x / a
        %=, E: x % = a, x = x % a
        //=, E: x // = a, x = x // a

反义符
    \n ：换行符
    \t ：制表符，用来对齐。end 默认是 \n，打印后会换行，end='' 可以防止换行
    \u ：表示其后是UNICODE编码
    \\ ：反斜线
    #原始字符串 ：'r' 或 'R' ，代表'raw'，写在反义符前

续字符
    \ ：连接上下行

占位符
    %d：整数占位符
    %f：浮点数占位符
    %s：字符串占位符
    %x：十六进制整数占位符
    %02d ： 2 表示最小占位符宽度， 0 表示用 0 向前填充宽度不足的部分
    % 运算符左边是要格式化的字符串，右边是一个元组。如果只有一个占位符，可以将元组里的元素拿出来，如：'我叫%s' % '小贝'
    %.nf 可以在 字符串格式化输出时保留n位小数

    {}

空字符
    空格、换行（\n）、制表符（\t）等

通配符
    * 和 ?
    代替一个或多个真正字符

保留字
    False, None, True, and, as, assert, break, class, continue, def, del, elif, else, except, finally, for, from, global, if, import, in, is, lambda, nonlocal, not, or, pass, raise, return, try, while, with, yield

数据类型
    字符串：所有的数据类型都可以转换成字符串
    整数型：不是所有的数据类型都可以转换成字符串
    浮点数
    布尔值

变量
    A = B
    x, y, z = a, b, c
    “A”,变量名称（变量名称使用普通小写字母/数字/下划线，不能包括空格，需要以字母或下划线开头，不能使用保留字或内置标识符，要具有描述性）
    “B”，变量的值

可迭代对象（把可以通过for...in...这类语句迭代读取一条数据供我们使用的对象称之为可迭代对象）
    列表(list) [] （有序的集合，元素可修改）
        增：.append(#值), .insert(#索引, #值)
        删：del #列表 [#索引], .pop(#索引), .remove(#值)
        改：#列表[#索引] = #新值
        查：.index(#元素内容)
        统计： .count(#值)
        排序： .sort()
        反转： .reverse()
        复制： .copy() 
        清空： .clear()
        分片：#列表[#起始索引:#结束索引] （分片中前后索引的值是可以省略的，前索引省略默认为 0，后索引省略默认为序列长度）（分片超出范围是不会报错的。你可以把字符串想象成一根绳子，分片就是用刀将绳子切分开来。在字符串长度内分片相当于在绳子上切割，而超出范围相当于一刀砍到了空气，对于绳子来说没有影响）

        初始化方法：
            lis = [0 for i in range(4)]
            lis = [x for x in range(4)]

    元组(tuple) （有序的集合，元素不可修改）
        查：.index(#元素内容)
        分片：#元组[#起始索引:#结束索引]
        可以用逗号分隔开的变量获取元组里的各个元素

    字符串(str)'' （不可变对象）
        字符串一旦创建后是不可改变的,使用字符串分片和拼接去生成一个新的字符串
        分片：str[#头下标: #尾下标: #步长]

    字典(dict){#键(key):#值(value)} （可变对象
        字典的每个元素是键值对，键是唯一的，如果有两个相同的键，python只会保留后面那个，值没有限制
        使用 #键 in #字典 判断键属不属于目标字典
        取值：#字典[#键]
        修改：#字典[#键] = #值
        添加：#字典[#键] = #值
        删除：del #字典[#键]

        .keys() ： 获取字典中所有键，返回dict_keys(#列表)
        .values() ： 获取字典中所有值，返回dict_values(#列表)
        .items() ： 获取字典中所有 键+值 元组构成的序列dict_items(#列表)
        .get(#键, #无目标键时返回值，默认为None) ： 通过键获取对应的值

    集合(set){#元素1, #元素2} （无序不重复元素序列）
        可以包含多个元素，但是不能重复

循环
    while循环：（条件不符时跳出循环；循环次数不确定）
        while #循环条件:
          #循环体

    for循环：（循环次数为in后的序列中的元素个数，依次遍历序列中的元素，并依次赋值给变量；循环次数确定）
        for #变量 in #序列:
          #循环体

    break语句：（满足条件跳出循环，执行循环后代码）在循环中
        if #循环结束条件:
          break

    continue语句：（满足条件跳到循环开头，进行下一轮循环）在循环中
        if #循环结束条件:
          continue

递归：
    当一个函数形成递归时，调用该函数的语句获得的返回值为该函数第一次执行时的返回值

三元表达式：#布尔表达式为 true 时执行的代码块 if #布尔表达式 else #布尔表达式为 false 时执行的代码块

列表生成式：[#生成元素表达式 for #变量名 in #序列 if #条件]

字符串格式化：
    '#占位符' % #元素
    '#占位符, #占位符, #占位符' % (#元组)

    'xx{}xx{}xx{}'.format('a', 'b', 'c')  返回：'xxaxxbxxc'
    'xx{0}xx{1}xx{2}'.format('a', 'b', 'c') 返回：'xxaxxbxxc'
    'xx{0}xx{0}xx{1}xx{2}'.format('a', 'b', 'c') 返回：'xxaxxaxxbxxc'
    'xx{1}xx{0}xx{2}'.format('a', 'b', 'c') 返回：'xxbxxaxxc'
    'My name is {name},I\'m a {job}'.format(name = 'van', job = 'artist') 返回：'My name is van,I'm a artist'

异常处理：
    标准异常：
        KeyboardInterrupt ：用户中断执行(通常是输入^C)
        IOError ：	输入/输出操作失败
        ImportError ：导入模块/对象失败
        IndexError ：序列中没有此索引(index)
        SyntaxError ：Python 语法错误
        IndentationError ：缩进错误
        TabError ：Tab 和空格混用
        TypeError ：对类型无效的操作
        ValueError ：传入无效的参数

    try...except...else 语句：
        >>>try:
        >>>    #要运行的代码块
        >>>except:
        >>>    #try部分引发异常时运行
        >>>except #异常A:
        >>>    #try部分引发异常A时运行
        >>>else:
        >>>    #try部分未引发异常时运行

打开文件：
    with 语句：with open('#文件名', '#打开方式') as #file:
    打开方式：
        r ：以只读的方式打开
        w ：以只写的方式打开
        b ：以二进制的方式打开(与r或w搭配)
        r+ ：以读写的方式打开
    方法：
        #file.read() ：从当前指针向后遍历一次以读取
        #file.write(#content) ：在当前指针写入目标内容
        #file.tell() ：返回当前制作的位置
        #file.seek(#偏移量, #起始位置) ：
            偏移量单位为字节
            起始位置：
                0 ：文件头
                1 ：当前位置（仅支持二进制打开方式）
                2 ：文件尾

turtle 绘图：
    绘图前需导入 turtle 模块
    画笔：
        默认状态下画笔在画板的最中间，并以此点为原点形成一个坐标系，单位是像素，画笔朝向默认为东（前方）
        画笔默认落下，画笔颜色默认为黑
        画笔形状：
            turtle.shape(#形状) ： 将画笔形状设为传入参数，支持的参数值有 'turtle':小海龟，'arrow':箭，'circle':圆，'square':正方形，'triangle':三角形，'classic':经典，默认小箭头即classic
        画笔状态：
            turtle.penup() ： 画笔抬起
            turtle.pendown() ： 画笔落下
        画笔显示：
            turtle.hideturtle() ： 隐藏画笔，隐藏画笔可以加快绘图速度
            turtle.showturtle() ： 显示画笔
        变色方法：
            turtle.color(#颜色) ： 将画笔颜色和填充颜色设为一致的颜色，支持的参数值有 '一些颜色的英文' 、16进制RGB色值
            turtle.pencolor(#颜色) ： 设置画笔颜色，支持的参数值与turtle.color一致
            turtle.fillcolor(#颜色) ： 设置填充颜色，支持的参数值与turtle.color一致
        上色方法：
            turtle.begin_fill() ： 开始上色
            turtle.end_fill() ： 结束上色
        移动方法：
            turtle.forward(#像素) ： 往前移动n像素
            turtle.backward(#像素)  ： 往后移动n像素
            turtle.goto(#横坐标, #纵坐标) ： 移动画笔位置至目标位置
        转向方法：
            turtle.left(#角度) ： 向左旋转n相对角度
            turtle.right(#角度) ： 向右旋转n相对角度
            turtle.setheading(#角度) ： 画笔朝向n固定角度
        动画速度：
            turtle.speed(#速度) ： 参数为0到10的整数，1最慢，10最快，0没有动画效果
        添加文本：
            turtle.write('#文本', font = (#字体, #字体大小, #字粗))
    画布：
        画布颜色：
            turtle.bgcolor(#颜色) 
    控制：
        turtle.getscreen() ： 获取屏幕这个对象
        .onclick(#函数) ： 接受一个函数并将点击位置的坐标传给该函数
        .addshape('#图片名') ： 添加目标图片作为形状
    其它：
        在本地环境使用 turtle 画图，图形绘制完毕后程序会自动退出。需要在代码最后加上 turtle.done() 来防止程序自动退出。
        turtle.bye() ：关闭绘图窗口

报错
    NameError

命令行操作：
    Anaconda prompt：
        conda list：查看安装好的包
        conda env list：查看当前存在的虚拟环境
        conda info -e：查看当前存在的虚拟环境
        conda update conda：检查更新当前conda
        conda --version：查询conda版本
        pyhton --version：查询当前python版本
        conda -h：查询 conda 的命令使用
        set conda_force_32bit=1：切换到32位
        set conda_force_32bit=0：切换到64位
        conda info ：查看当前环境信息
        conda create -n #虚拟环境名 python=#python主版本号.#python次版本号：创建一个python虚拟环境，默认情况只安装一些必须的包，若要像anaconda一样自动安装很多常用的包，则须在末尾加上 anaconda
        activate #环境名：激活目标虚拟环境
        conda install -n #虚拟环境名 #包名：安装目标包至目标虚拟环境中
        deactivate：关闭虚拟环境，即从当前虚拟环境退出并使用PATH环境中默认的python版本
        conda remove -n #虚拟环境名 --all：删除目标虚拟环境
        conda remove --name #虚拟环境名 #目标包名：删除目标虚拟环境中的目标包

    pyinstaller 包：
        pyinstaller #目标py文件名：打包目标py文件，生成文件夹 build 和 dist，下同
        pyinstaller -F #目标py文件名：只在 dist 中生成 目标exe文件
        pyinstaller -D #目标py文件名：默认选项，除 目标exe文件 外还会在 dist 中生成很多依赖文件
        pyinstaller -c #目标py文件名：使用控制台
        pyinstaller -w #目标py文件名：不使用控制台
        pyinstaller -p #路径 #目标py文件名：设置导入路径
        pyinstaller -i  #icon路径 #目标py文件名：将 icon文件 设置为 exe文件的图标

其它
    三引号支持多行字符串

    换行符在字符串中有效

    pass是空语句，跳过

    四舍六入五成双：
        一种比较科学的计数保留法，是一种数字修约规则，它的精确和科学是基于统计学上的
        1~4舍去，6~9进位，遇5时，如果5后面还有数字则进位，如果没有则看5前一位数字，偶数则进位，奇数则舍去

    写完代码后，也要回顾看看哪里能不能改进，写出结构清晰、可读性高、扩展性好的代码，不要止步于功能的实现

    解决问题前得先把思路理清，先想好要怎么做再去动手写代码。思路清晰了，才能高效地解决问题。要把所学知识运用到实际生活中，难点在于怎么用相应的代码解决对应的问题。先将总体思路理清，再一步步细化到具体的细节如何解决，这样问题将迎刃而解

    编程思维(Computational Thinking)
        问题分解：把现实生活中的复杂问题，逐步拆分成容易解决的小问题；
        模式识别：根据已有的知识和经验，找出新问题和以前解决过的问题的相似性；
        抽象思维：将问题里涉及的数据抽象到数据结构（变量、列表、字典等），把数据处理过    程可重复执行部分抽象成函数；
        算法设计：根据前三步的分析成果，设计步骤，写出算法，从而解决问题。

